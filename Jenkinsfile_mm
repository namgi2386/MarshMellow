pipeline {
    agent any
    
    environment {
        JAVA_HOME = '/usr/lib/jvm/temurin-21-jdk-amd64'
        IMAGE_NAME = "yunjaeeun12/gbh-mm"
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials-id'
        GITLAB_CREDENTIALS = 'git_lab'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://lab.ssafy.com/s12-fintech-finance-sub1/S12P21C108.git',
                    credentialsId: "${env.GITLAB_CREDENTIALS}"
            }
        }
        stage('Prepare Application Config') {
            steps {
                withCredentials([file(credentialsId: 'mm_config_file', variable: 'APP_CONFIG_FILE')]) {
                    sh 'mkdir -p gbh_mm/src/main/resources'
                    // 권한 부여: 디렉토리에 쓰기 권한을 모두에게 부여 (필요에 따라 적절한 권한으로 변경)
                    sh 'chmod -R 777 gbh_mm/src/main/resources'
                    sh 'cp $APP_CONFIG_FILE gbh_mm/src/main/resources/application.yml'
                }
            }
        }
        stage('Prepare Firebase Config') {
            steps {
                withCredentials([file(credentialsId: 'firebase_config_file', variable: 'FIREBASE_CONFIG_FILE')]) {
                    sh 'chmod -R 777 gbh_mm/src/main/resources'
                    sh 'cp $FIREBASE_CONFIG_FILE gbh_mm/src/main/resources/gbh-mm-firebase.json'
                }
            }
        }
        stage('Build Spring Boot App') {
            steps {
                dir('gbh_mm') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build -x test'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('gbh_mm') {
                    withEnv(["PATH=/usr/local/bin:$PATH"]) {
                        sh "docker build -t ${IMAGE_NAME}:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: env.DOCKERHUB_CREDENTIALS,
                        passwordVariable: 'DOCKERHUB_PASS',
                        usernameVariable: 'DOCKERHUB_USER'
                    )
                ]) {
                    withEnv(["PATH=/usr/local/bin:$PATH"]) {
                        sh """
                            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                            docker push ${IMAGE_NAME}:${env.BUILD_NUMBER}
                        """
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                withEnv(["PATH=/usr/local/bin:$PATH"]) {
                    sh "docker pull ${IMAGE_NAME}:${env.BUILD_NUMBER}"
                    sh "docker stop gbh_mm || true && docker rm gbh_mm || true"
                    sh "docker run -d --name gbh_mm -p 9000:9000 ${IMAGE_NAME}:${env.BUILD_NUMBER}"
                }
            }
        }
    }
    post {
        failure {
            echo 'CI/CD 파이프라인 실행 중 문제가 발생했습니다.'
        }
    }
}
