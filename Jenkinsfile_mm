pipeline {
    agent any

    environment {
        JAVA_HOME = '/usr/lib/jvm/temurin-21-jdk-amd64'
        IMAGE_NAME = "yunjaeeun12/gbh-mm"
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials-id'
        GITLAB_CREDENTIALS = 'git_lab'
        // 빌드 번호는 Jenkins에서 자동으로 할당되거나, 환경변수로 지정할 수 있음.
    }
    stages {
        // 기존 Checkout, Build, Docker Image Build, Push, Deploy 단계 등
        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://lab.ssafy.com/s12-fintech-finance-sub1/S12P21C108.git',
                    credentialsId: "${env.GITLAB_CREDENTIALS}"
            }
        }
        stage('Prepare Application Config') {
            steps {
                withCredentials([file(credentialsId: 'mm_config_file', variable: 'APP_CONFIG_FILE')]) {
                    sh 'mkdir -p gbh_mm/src/main/resources'
                    sh 'chmod -R 777 gbh_mm/src/main/resources'
                    sh 'cp $APP_CONFIG_FILE gbh_mm/src/main/resources/application.yml'
                }
            }
        }
        stage('Prepare Firebase Config') {
            steps {
                withCredentials([file(credentialsId: 'firebase_config_file', variable: 'FIREBASE_CONFIG_FILE')]) {
                    sh 'chmod -R 777 gbh_mm/src/main/resources'
                    sh 'cp $FIREBASE_CONFIG_FILE gbh_mm/src/main/resources/gbh-mm-firebase.json'
                }
            }
        }
        stage('Build Spring Boot App') {
            steps {
                dir('gbh_mm') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build -x test'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('gbh_mm') {
                    withEnv(["PATH=/usr/local/bin:$PATH"]) {
                        sh "docker build -t ${IMAGE_NAME}:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.DOCKERHUB_CREDENTIALS,
                    passwordVariable: 'DOCKERHUB_PASS',
                    usernameVariable: 'DOCKERHUB_USER'
                )]) {
                    withEnv(["PATH=/usr/local/bin:$PATH"]) {
                        // 스크립트 맨 위에 #!/bin/bash 추가하여 bash로 실행하도록 함
                        sh '''
                        #!/bin/bash
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker push gbh_mm:latest
                        '''
                    }
                }
            }
        }
        stage('Deploy Application') {
            steps {
                withEnv(["PATH=/usr/local/bin:$PATH"]) {
                    sh "docker pull ${IMAGE_NAME}:${env.BUILD_NUMBER}"
                    sh "docker stop gbh_mm || true && docker rm gbh_mm || true"
                    sh "docker run -d --name gbh_mm -p 9000:9000 ${IMAGE_NAME}:${env.BUILD_NUMBER}"
                }
            }
        }
        stage('Deploy Infrastructure') {
            steps {
                // EC2에 배포용 파일이 있는 ~/gbh_mm_deploy 디렉토리에서 docker-compose를 실행
                sshagent(['EC2_SSH_CREDENTIALS_ID']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@<EC2_IP_ADDRESS> << 'EOF'
                    cd ~/gbh_mm_deploy
                    # 최신 이미지를 가져오거나(이미지가 push 되었으므로)
                    docker-compose pull
                    # 컨테이너들을 백그라운드로 실행(또는 재시작)
                    docker-compose up -d
                    # 필요하다면 인증서 갱신 및 nginx reload (자동화된 스크립트가 있다면 추가)
                    docker-compose run --rm certbot renew && docker-compose exec nginx nginx -s reload
                    exit
EOF
                    '''
                }
            }
        }
    }
    post {
        failure {
            echo 'CI/CD 파이프라인 실행 중 문제가 발생했습니다.'
        }
    }
}
