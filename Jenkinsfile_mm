pipeline {
    agent any

    environment {
        JAVA_HOME = '/usr/lib/jvm/temurin-21-jdk-amd64'
        IMAGE_NAME = "yunjaeeun12/gbh-mm"
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials-id'
        GITLAB_CREDENTIALS = 'git_lab'
        EC2_IP_ADDRESS = 'j12c108.p.ssafy.io'  // 실제 EC2 인스턴스의 공인 IP 주소 또는 도메인
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://lab.ssafy.com/s12-fintech-finance-sub1/S12P21C108.git',
                    credentialsId: "${env.GITLAB_CREDENTIALS}"
            }
        }
        stage('Prepare Application Config') {
            steps {
                withCredentials([file(credentialsId: 'mm_config_file', variable: 'APP_CONFIG_FILE')]) {
                    sh 'mkdir -p gbh_mm/src/main/resources'
                    sh 'chmod -R 777 gbh_mm/src/main/resources'
                    sh 'cp $APP_CONFIG_FILE gbh_mm/src/main/resources/application.yml'
                }
            }
        }
        stage('Prepare Firebase Config') {
            steps {
                withCredentials([file(credentialsId: 'firebase_config_file', variable: 'FIREBASE_CONFIG_FILE')]) {
                    sh 'chmod -R 777 gbh_mm/src/main/resources'
                    sh 'cp $FIREBASE_CONFIG_FILE gbh_mm/src/main/resources/gbh-mm-firebase.json'
                }
            }
        }
        stage('Build Spring Boot App') {
            steps {
                dir('gbh_mm') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build -x test'
                }
            }
        }
        stage('Build FastAPI AI Image') {
            steps {
                dir('gbh_ai') {
                    sh 'docker build -t yunjaeeun12/gbh-fastapi:latest .'
                }
            }
        }
        stage('Push FastAPI AI Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.DOCKERHUB_CREDENTIALS,
                    passwordVariable: 'DOCKERHUB_PASS',
                    usernameVariable: 'DOCKERHUB_USER'
                )]) {
                    sh '''
                    echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                    docker push yunjaeeun12/gbh-fastapi:latest
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('gbh_mm') {
                    withEnv(["PATH=/usr/local/bin:$PATH"]) {
                        // 태그를 latest로 고정
                        sh "docker build -t ${IMAGE_NAME}:latest ."
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.DOCKERHUB_CREDENTIALS,
                    passwordVariable: 'DOCKERHUB_PASS',
                    usernameVariable: 'DOCKERHUB_USER'
                )]) {
                    withEnv(["PATH=/usr/local/bin:$PATH"]) {
                        sh '''
                        #!/bin/bash
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker push ${IMAGE_NAME}:latest
                        '''
                    }
                }
            }
        }
        stage('Deploy Application') {
            steps {
                withEnv(["PATH=/usr/local/bin:$PATH"]) {
                    // 최신 이미지를 pull, 기존 컨테이너 제거 후 run
                    sh "docker pull ${IMAGE_NAME}:latest"
                    sh "docker stop gbh_mm || true && docker rm gbh_mm || true"
                    sh "docker run -d --name gbh_mm -p 9000:9000 ${IMAGE_NAME}:latest"
                }
            }
        }
        stage('Deploy Infrastructure') {
            steps {
                sshagent(['EC2_SSH_PEM']) {
                    sh '''
                    #!/bin/bash
                    ssh -o StrictHostKeyChecking=no ubuntu@$EC2_IP_ADDRESS "docker rm -f gbh_mm || true && cd ~/gbh_mm_deploy && docker-compose down && docker-compose pull && docker-compose up -d && sleep 60 && docker-compose run --rm certbot renew && docker-compose exec -T nginx nginx -s reload"
                    '''
                }
            }
        }
    }
    post {
        failure {
            echo 'CI/CD 파이프라인 실행 중 문제가 발생했습니다.'
        }
    }
}
